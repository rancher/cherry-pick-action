package app

import (
	"context"
	"fmt"
	"strings"

	gh "github.com/rancher/cherry-pick-action/internal/github"
	"github.com/rancher/cherry-pick-action/internal/orchestrator"
)

const summaryCommentMarker = "<!-- rancher-cherry-pick-action:summary -->"

func (r *Runner) upsertSummaryComment(ctx context.Context, ghClient gh.Client, owner, repo string, number int, result orchestrator.Result) error {
	body := buildSummaryCommentBody(result)

	comments, err := ghClient.ListPullRequestComments(ctx, owner, repo, number)
	if err != nil {
		return fmt.Errorf("list existing comments: %w", err)
	}

	for _, comment := range comments {
		if strings.Contains(comment.Body, summaryCommentMarker) {
			if comment.Body == body {
				return nil
			}
			if err := ghClient.UpdateComment(ctx, owner, repo, comment.ID, body); err != nil {
				return fmt.Errorf("update existing comment: %w", err)
			}
			return nil
		}
	}

	if err := ghClient.CommentOnPullRequest(ctx, owner, repo, number, body); err != nil {
		return fmt.Errorf("create comment: %w", err)
	}

	return nil
}

func buildSummaryCommentBody(result orchestrator.Result) string {
	var builder strings.Builder
	builder.WriteString(summaryCommentMarker)
	builder.WriteString("\n\n### Cherry-pick action summary\n\n")
	builder.WriteString(renderResultDetails(result))
	if !strings.HasSuffix(builder.String(), "\n") {
		builder.WriteString("\n")
	}
	builder.WriteString("_Generated by rancher/cherry-pick-action._\n")
	return builder.String()
}
